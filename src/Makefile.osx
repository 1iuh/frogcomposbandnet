# File: Makefile.osx

# This is a Makefile for the Mac OS X Cocoa port of Angband.

# default target
all: install

# settings
CC = clang
LD = ld
OPT ?= -O2

# the CFBundleExecutable plist value is used within the app, so we want it to match the bundle name to make everything look right
NAME = PosChengband
APPNAME = $(NAME).app
EXE = $(NAME)

# for consistency with older versions, use a lower case bundle ID
BUNDLE_IDENTIFIER = org.rephial.angband

ARCH = -arch i386 -arch x86_64
WARNINGS = -W -Wall -Wno-unused-parameter -Wno-missing-field-initializers
JUST_C = -std=c99 -Wdeclaration-after-statement
OBJ_CFLAGS = -std=c99 -x objective-c -mmacosx-version-min=10.5
CFLAGS = -g -I. $(WARNINGS) $(OPT) -DMACH_O_CARBON -DHAVE_MKSTEMP \
	-fno-stack-protector $(ARCH)
LIBS = -framework Cocoa
# Fix for bug #1663: Set the deployment target via environment variable
# for the final link command. See http://grauonline.de/wordpress/?p=71
# or http://stackoverflow.com/questions/5509885/creating-app-for-old-mac-from-new-mac-machine
DEPLOYMENT_TARGET = MACOSX_DEPLOYMENT_TARGET=10.5

# Import user prefs
# If you don't want to edit this file, put your module redefinitions
# and build flags in "./config"
-include config

# -DALLOW_BORG is required for all .o files in a borg build 
ifneq (,$(findstring borg, $(MAKECMDGOALS)))
CFLAGS += -DALLOW_BORG
endif

# Check for autoconf.h; do not warn on nonexistence
autoconf= $(wildcard autoconf.h)
ifneq ($(autoconf),)
CFLAGS += -DHAVE_CONFIG_H
endif

# let Makefile.inc set VERSION and then we'll use the detailed build ID as the bundle version (visible in "About Angband")
include Makefile.inc
SRCS = \
	archaeologist.c archer.c artifact.c autopick.c virtue.c bard.c \
	beastmaster.c berserker.c birth.c bldg.c blood_knight.c blood_mage.c blue_mage.c \
	cavalry.c cave.c chaos_warrior.c classes.c cmd1.c cmd2.c cmd3.c cmd4.c cmd5.c \
	cmd6.c combat.c demigod.c devicemaster.c devices.c do-spell.c doppelganger.c duelist.c dungeon.c \
	effects.c equip.c fear.c files.c flavor.c floors.c force_trainer.c generate.c \
	grid.c hex.c high_mage.c hissatsu.c imitator.c init1.c init2.c load.c mage.c \
	magic_eater.c mauler.c melee1.c melee2.c menu.c mindcrafter.c mirror_master.c \
	monk.c monster.c monster1.c monster2.c mspells1.c mspells2.c mspells3.c mut.c \
	mut_a.c mystic.c necromancer.c ninja.c object1.c object2.c object3.c obj_kind.c paladin.c \
	priest.c psion.c races.c races_a.c races_k.c races_mimic.c race_angel.c \
	race_beholder.c race_demon.c race_dragon.c race_elemental.c race_giant.c race_golem.c \
	race_hound.c race_hydra.c race_jelly.c race_leprechaun.c race_lich.c race_quylthulg.c race_spider.c \
	race_sword.c race_troll.c race_xorn.c racial.c rage-mage.c ranger.c red_mage.c \
	resist.c rogue.c rooms.c rune_knight.c samurai.c save.c savefile.c scores.c scout.c \
	skills.c sniper.c sorcerer.c spells.c spells1.c spells2.c spells3.c spells_a.c \
	spells_c.c spells_h.c spells_m.c spells_s.c spoilers.c store.c streams.c \
	tables.c time_lord.c tourist.c util.c variable.c variant.c warlock.c warrior.c \
	warrior_mage.c weaponmaster.c weaponsmith.c wild.c wild_realm.c wild_talent.c \
	wizard1.c wizard2.c xtra1.c xtra2.c z-term.c int-map.c str-map.c z-form.c \
	z-rand.c z-util.c z-virt.c main-gcu.c main-x11.c main.c

OBJS = \
	archaeologist.o archer.o artifact.o autopick.o virtue.o bard.o \
	beastmaster.o berserker.o birth.o bldg.o blood_knight.o blood_mage.o blue_mage.o \
	cavalry.o cave.o chaos_warrior.o classes.o cmd1.o cmd2.o cmd3.o cmd4.o cmd5.o \
	cmd6.o combat.o demigod.o devicemaster.o devices.o do-spell.o doppelganger.o duelist.o dungeon.o \
	effects.o equip.o fear.o files.o flavor.o floors.o force_trainer.o generate.o \
	grid.o hex.o high_mage.o hissatsu.o imitator.o init1.o init2.o load.o mage.o \
	magic_eater.o mauler.o melee1.o melee2.o menu.o mindcrafter.o mirror_master.o \
	monk.o monster.o monster1.o monster2.o mspells1.o mspells2.o mspells3.o mut.o \
	mut_a.o mystic.o necromancer.o ninja.o object1.o object2.o object3.o obj_kind.o paladin.o \
	priest.o psion.o races.o races_a.o races_k.o races_mimic.o race_angel.o \
	race_beholder.o race_demon.o race_dragon.o race_elemental.o race_giant.o race_golem.o \
	race_hound.o race_hydra.o race_jelly.o race_leprechaun.o race_lich.o race_quylthulg.o race_spider.o \
	race_sword.o race_troll.o race_xorn.o racial.o rage-mage.o ranger.o red_mage.o \
	resist.o rogue.o rooms.o rune_knight.o samurai.o save.o savefile.o scores.o scout.o \
	skills.o sniper.o sorcerer.o spells.o spells1.o spells2.o spells3.o spells_a.o \
	spells_c.o spells_h.o spells_m.o spells_s.o spoilers.o store.o streams.o \
	tables.o time_lord.o tourist.o util.o variable.o variant.o warlock.o warrior.o \
	warrior_mage.o weaponmaster.o weaponsmith.o wild.o wild_realm.o wild_talent.o \
	wizard1.o wizard2.o xtra1.o xtra2.o z-term.o int-map.o str-map.o z-form.o \
	z-rand.o z-util.o z-virt.o main-gcu.o main-x11.o main.o

BUNDLE_VERSION := $(shell ../scripts/version.sh)
CFLAGS += -DBUILD_ID=${VERSION}

OSX_OBJS = main-cocoa.o



#
# Build the "Angband" program
#


$(EXE).o: $(OBJS)
	@printf "%10s %-20s\n" LD $@.x86_64
	@$(LD) -r -arch x86_64 -o $@.x86_64 $(OBJS)
	@printf "%10s %-20s\n" LD $@.i386
	@$(LD) -r -arch i386 -o $@.i386 $(OBJS)
	lipo -arch x86_64 $@.x86_64 -arch i386 $@.i386 -create -output poschengband.o

$(EXE): $(EXE).o $(OSX_OBJS)
	$(DEPLOYMENT_TARGET) $(CC) $(CFLAGS) $(LDFLAGS) -o $(EXE) $(EXE).o $(OSX_OBJS) $(LIBS) 

#
# Clean up old junk
#

clean:
	-rm -f $(OBJS) $(EXE) $(EXE).o.i386 $(EXE).o.x86_64 $(EXE).o $(OSX_OBJS)


#
# Basic build rules and dependencies
#

main-cocoa.o : main-cocoa.m
	@printf "%10s %-20s (objective-c)\n" CC $<
	@$(CC) $(CFLAGS) $(OBJ_CFLAGS) -c -o $@ $<
%.o : %.c
	@printf "%10s %-20s\n" CC $<
	@$(CC) $(JUST_C) $(CFLAGS) -c -o $@ $<


#
# Installation.
# Application bundle -- a directory looking like an ordinary application
#

# Bundle of the game (it must be a directory whose name ends in ".app")
APPBNDL = ../$(APPNAME)

# A bundle must have these subdirectories
APPCONT = $(APPBNDL)/Contents
APPBIN = $(APPCONT)/MacOS
APPRES = $(APPCONT)/Resources

# Auxiliary files. Please note that it still uses resouce fork based
# resources for menus, dialogues and sounds, so that it isn't safe to use
# utilities that doesn't understand them (virtually all Un*x commands) to
# copy or archive the application.
#
# The graphics tiles have been moved out of the resource fork, but, again,
# it isn't generally safe just to convert GIF or BMP files to PNG, because
# the Mac OS takes dpi values stored in various images quite seriously.
# Almost all tilesets for *band requires adjustment, with the sole exception
# of 8x8.png for Vanilla.  Make sure setting dpi to 72, *not* preserving
# the actual size of image.  When you have them ready, put them in
# the lib/xtra/graf directory and rebuild.
PLIST = cocoa/Angband-Cocoa.xml

ICONFILES = cocoa/Angband_Icons.icns cocoa/Save.icns cocoa/Edit.icns cocoa/Data.icns

LIBFILES = \
  ../lib/edit/*.txt \
  ../lib/file/*.txt \
  ../lib/help/*.txt \
  ../lib/help/*.hlp \
  ../lib/pref/*.prf \

install: $(EXE) $(ICONFILES) $(PLIST) $(LIBFILES)
	@echo making directories...
	@mkdir -p $(APPBNDL)
	@mkdir -p $(APPCONT)
	@mkdir -p $(APPBIN)
	@mkdir -p $(APPRES)
	@mkdir -p $(APPRES)/English.lproj/MainMenu.nib 
	@mkdir -p $(APPRES)/lib/edit
	@mkdir -p $(APPRES)/lib/file
	@mkdir -p $(APPRES)/lib/help
	@mkdir -p $(APPRES)/lib/pref
	@mkdir -p $(APPRES)/lib/script
	@mkdir -p $(APPRES)/lib/xtra/graf
	@mkdir -p $(APPRES)/lib/xtra/sound

	@echo copying files...
	@cp ../lib/edit/*.txt $(APPRES)/lib/edit
	@cp ../lib/file/*.txt $(APPRES)/lib/file
	@cp ../lib/help/*.txt $(APPRES)/lib/help
	@cp ../lib/help/*.hlp $(APPRES)/lib/help
	@cp ../lib/pref/*.prf $(APPRES)/lib/pref

	# 'optionally' install sound and graphics tiles, if present
	# TODO: read the tile pngs from $(APPRES)/lib/xtra/graf/
	# so we can just recursively copy that directory.
	-cp ../lib/xtra/graf/graphics.txt $(APPRES)/lib/xtra/graf
	-cp ../lib/xtra/graf/*.png $(APPRES)/
	-cp ../lib/xtra/sound/*.mp3 $(APPRES)/lib/xtra/sound
	-cp ../lib/xtra/sound/sound.cfg $(APPRES)/lib/xtra/sound

	install -m 755 $(EXE) $(APPBIN)
	install -m 644 $(ICONFILES) $(APPRES)
	cp cocoa/English.lproj/MainMenu.nib/*ib $(APPRES)/English.lproj/MainMenu.nib
	cp cocoa/CommandMenu.plist $(APPRES)/CommandMenu.plist
	sed -e 's/\$$VERSION\$$/$(VERSION)/' \
		-e 's/\$$COPYRIGHT\$$/$(COPYRIGHT)/' \
		-e 's/\$$NAME\$$/$(NAME)/' \
		-e 's/\$$EXECUTABLE\$$/$(EXE)/' \
		-e 's/\$$BUNDLE_VERSION\$$/$(BUNDLE_VERSION)/' \
		-e 's/\$$BUNDLE_IDENTIFIER\$$/$(BUNDLE_IDENTIFIER)/' \
		$(PLIST) > $(APPCONT)/Info.plist

	SetFile -a B $(APPBNDL)


vars:
	@echo LDFLAGS = $(LDFLAGS)
	@echo CFLAGS = $(CFLAGS)
	@echo BASEOBJS = $(BASEOBJS)

# build a version that has separate prefs (different bundle ID) and directories (setting SAFE_DIRECTORY preprocessor flag)
safe-install:
	$(MAKE) -f Makefile.osx install CFLAGS="-DSAFE_DIRECTORY $(CFLAGS)"
	sed -e 's/\$$VERSION\$$/$(VERSION)/' \
		-e 's/\$$COPYRIGHT\$$/$(COPYRIGHT)/' \
		-e 's/\$$NAME\$$/$(NAME)/' \
		-e 's/\$$EXECUTABLE\$$/$(EXE)/' \
		-e 's/\$$BUNDLE_VERSION\$$/$(BUNDLE_VERSION)/' \
		-e 's/\$$BUNDLE_IDENTIFIER\$$/$(BUNDLE_IDENTIFIER).$(VERSION)/' \
		$(PLIST) > $(APPCONT)/Info.plist


PACKAGE_NAME = $(NAME)-$(VERSION)

# In the unlikely event that tar+zip isn't enough...

dist: install
	@rm -rf disttemp*
	mkdir -p disttemp/Docs
	cp ../changes.txt ../copying.txt ../faq.txt ../readme.txt disttemp/Docs
	-cp ../doc/manual.html ../doc/manual.pdf disttemp/Docs
	cp -R -p "$(APPBNDL)" disttemp
	SetFile -a B disttemp/$(APPNAME)

	@-rm ../"$(PACKAGE_NAME)-osx.dmg"

	hdiutil create -quiet -fs HFS+ -volname $(PACKAGE_NAME) -srcfolder disttemp disttemp.dmg
	hdiutil convert disttemp.dmg -quiet -format UDZO -imagekey zlib-level=6 -o ../"$(PACKAGE_NAME)-osx.dmg"

	rm -rf disttemp*

tests:
	$(MAKE) -C tests all CFLAGS="-I.. $(CFLAGS)" LDFLAGS="$(LIBS)" DEFAULT_CONFIG_PATH=../lib

test-clean:
	$(MAKE) -C tests clean

.PHONY : tests test-clean
#
# Generate dependencies automatically
#

depend:
	makedepend -D__MAKEDEPEND__ $(SRCS)


#
# Hack -- some file dependencies
#

HDRS = \
	h-basic.h \
	h-define.h h-type.h h-system.h h-config.h

INCS = \
	angband.h \
	z-config.h defines.h types.h externs.h \
	z-term.h z-rand.h z-util.h z-virt.h z-form.h $(HDRS)

archaeologist.o: archaeologist.c $(INCS)
archer.o: archer.c $(INCS)
artifact.o: artifact.c $(INCS)
autopick.o: autopick.c $(INCS)
virtue.o: virtue.c $(INCS)
bard.o: bard.c $(INCS)
beastmaster.o: beastmaster.c $(INCS)
berserker.o: berserker.c $(INCS)
birth.o: birth.c $(INCS)
bldg.o: bldg.c $(INCS)
blood_knight.o: blood_knight.c $(INCS)
blood_mage.o: blood_mage.c $(INCS)
blue_mage.o: blue_mage.c $(INCS)
cavalry.o: cavalry.c $(INCS)
cave.o: cave.c $(INCS)
chaos_warrior.o: chaos_warrior.c $(INCS)
classes.o: classes.c $(INCS)
cmd1.o: cmd1.c $(INCS)
cmd2.o: cmd2.c $(INCS)
cmd3.o: cmd3.c $(INCS)
cmd4.o: cmd4.c $(INCS)
cmd5.o: cmd5.c $(INCS)
cmd6.o: cmd6.c $(INCS)
combat.o: combat.c $(INCS)
demigod.o: demigod.c $(INCS)
devicemaster.o: devicemaster.c $(INCS)
devices.o: devices.c $(INCS)
do-spell.o: do-spell.c $(INCS)
doppelganger.o: doppelganger.c $(INCS)
duelist.o: duelist.c $(INCS)
dungeon.o: dungeon.c $(INCS)
effects.o: effects.c $(INCS)
equip.o: equip.c $(INCS)
fear.o: fear.c $(INCS)
files.o: files.c $(INCS)
flavor.o: flavor.c $(INCS)
floors.o: floors.c $(INCS)
force_trainer.o: force_trainer.c $(INCS)
generate.o: generate.c $(INCS)
grid.o: grid.c $(INCS)
hex.o: hex.c $(INCS)
high_mage.o: high_mage.c $(INCS)
hissatsu.o: hissatsu.c $(INCS)
imitator.o: imitator.c $(INCS)
init1.o: init1.c $(INCS)
init2.o: init2.c $(INCS)
load.o: load.c $(INCS)
mage.o: mage.c $(INCS)
magic_eater.o: magic_eater.c $(INCS)
mauler.o: mauler.c $(INCS)
melee1.o: melee1.c $(INCS)
melee2.o: melee2.c $(INCS)
menu.o: menu.c $(INCS)
mindcrafter.o: mindcrafter.c $(INCS)
mirror_master.o: mirror_master.c $(INCS)
monk.o: monk.c $(INCS)
monster.o: monster.c $(INCS)
monster1.o: monster1.c $(INCS)
monster2.o: monster2.c $(INCS)
mspells1.o: mspells1.c $(INCS)
mspells2.o: mspells2.c $(INCS)
mspells3.o: mspells3.c $(INCS)
mut.o: mut.c $(INCS)
mut_a.o: mut_a.c $(INCS)
mystic.o: mystic.c $(INCS)
necromancer.o: necromancer.c $(INCS)
ninja.o: ninja.c $(INCS)
object1.o: object1.c $(INCS)
object2.o: object2.c $(INCS)
object3.o: object3.c $(INCS)
obj_kind.o: obj_kind.c $(INCS)
paladin.o: paladin.c $(INCS)
priest.o: priest.c $(INCS)
psion.o: psion.c $(INCS)
races.o: races.c $(INCS)
races_a.o: races_a.c $(INCS)
races_k.o: races_k.c $(INCS)
races_mimic.o: races_mimic.c $(INCS)
race_angel.o: race_angel.c $(INCS)
race_beholder.o: race_beholder.c $(INCS)
race_demon.o: race_demon.c $(INCS)
race_dragon.o: race_dragon.c $(INCS)
race_elemental.o: race_elemental.c $(INCS)
race_giant.o: race_giant.c $(INCS)
race_golem.o: race_golem.c $(INCS)
race_hound.o: race_hound.c $(INCS)
race_hydra.o: race_hydra.c $(INCS)
race_jelly.o: race_jelly.c $(INCS)
race_leprechaun.o: race_leprechaun.c $(INCS)
race_lich.o: race_lich.c $(INCS)
race_quylthulg.o: race_quylthulg.c $(INCS)
race_spider.o: race_spider.c $(INCS)
race_sword.o: race_sword.c $(INCS)
race_troll.o: race_troll.c $(INCS)
race_xorn.o: race_xorn.c $(INCS)
racial.o: racial.c $(INCS)
rage-mage.o: rage-mage.c $(INCS)
ranger.o: ranger.c $(INCS)
red_mage.o: red_mage.c $(INCS)
resist.o: resist.c $(INCS)
rogue.o: rogue.c $(INCS)
rooms.o: rooms.c $(INCS)
rune_knight.o: rune_knight.c $(INCS)
samurai.o: samurai.c $(INCS)
save.o: save.c $(INCS)
savefile.o: savefile.c $(INCS)
scores.o: scores.c $(INCS)
scout.o: scout.c $(INCS)
skills.o: skills.c $(INCS)
sniper.o: sniper.c $(INCS)
sorcerer.o: sorcerer.c $(INCS)
spells.o: spells.c $(INCS)
spells1.o: spells1.c $(INCS)
spells2.o: spells2.c $(INCS)
spells3.o: spells3.c $(INCS)
spells_a.o: spells_a.c $(INCS)
spells_c.o: spells_c.c $(INCS)
spells_h.o: spells_h.c $(INCS)
spells_m.o: spells_m.c $(INCS)
spells_s.o: spells_s.c $(INCS)
spoilers.o: spoilers.c $(INCS)
store.o: store.c $(INCS)
streams.o: streams.c $(INCS)
tables.o: tables.c $(INCS)
time_lord.o: time_lord.c $(INCS)
tourist.o: tourist.c $(INCS)
util.o: util.c $(INCS)
variable.o: variable.c $(INCS)
variant.o: variant.c $(INCS)
warlock.o: warlock.c $(INCS)
warrior.o: warrior.c $(INCS)
warrior_mage.o: warrior_mage.c $(INCS)
weaponmaster.o: weaponmaster.c $(INCS)
weaponsmith.o: weaponsmith.c $(INCS)
wild.o: wild.c $(INCS)
wild_realm.o: wild_realm.c $(INCS)
wild_talent.o: wild_talent.c $(INCS)
wizard1.o: wizard1.c $(INCS)
wizard2.o: wizard2.c $(INCS)
xtra1.o: xtra1.c $(INCS)
xtra2.o: xtra2.c $(INCS)
z-term.o: z-term.c $(INCS)
int-map.o: int-map.c $(INCS)
str-map.o: str-map.c $(INCS)
z-form.o: z-form.c $(INCS)
z-rand.o: z-rand.c $(INCS)
z-util.o: z-util.c $(INCS)
z-virt.o: z-virt.c $(INCS)
main-gcu.o: main-gcu.c $(INCS)
main-x11.o: main-x11.c $(INCS)
main.o: main.c $(INCS)

